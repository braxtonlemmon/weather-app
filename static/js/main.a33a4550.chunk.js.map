{"version":3,"sources":["components/GlobalStyle.js","components/Header.js","components/FormComponent.js","components/FormContainer.js","components/Main.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","TopNav","styled","header","H1","h1","Header","FormWrapper","div","Form","form","H2","h2","Input","input","Button","button","FormComponent","props","placeholder","type","name","id","minLength","required","value","data","location","onChange","handleChange","className","onClick","handleSubmit","FormContainer","sendToParent","updateLocation","state","bind","e","target","this","setState","preventDefault","Component","MainWrapper","List","ul","ListItem","li","Span","span","Main","temp","high","low","humidity","wind","Wrapper","App","loaded","processData","loadDefault","setTimeout","getWeatherData","then","city","unit","process","fetch","mode","response","status","Error","json","Math","round","main","temp_min","temp_max","speed","formData","catch","color","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a33a4550.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body, html, * {\n    font-family: 'Montserrat Alternates', sans-serif;\n    font-size: 18px;\n    color: #143642;\n  }\n\n  body {\n    background: #0F8B8D;\n  }\n`\n\nexport default GlobalStyle;","import React from 'react';\nimport styled from 'styled-components';\n\nconst TopNav = styled.header`\n  display: flex;\n  justify-content: center;\n  background-color: #143642;\n  padding: 20px;\n  width: 100%;\n`\n\nconst H1 = styled.h1`\n  font-size: 2.2rem;\n    color: #DAD2D8;\n`\n\nconst Header = () => {\n  return (\n    <TopNav>\n      <H1>Weather Checker!</H1>\n    </TopNav>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\n\nconst FormWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 15px 0;\n  width: 80%;\n`\n\nconst Form = styled.form`\n  display: grid;\n  gap: 10px;\n`\n\nconst H2 = styled.h2`\n  text-align: center;\n  font-size: 2rem;\n  margin-bottom: 10px;\n`\n\nconst Input = styled.input`\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid black;\n  font-size: 18px;\n  background: #DAD2D8;\n`\n\nconst Button = styled.button`\n  border: none;\n  border-radius: 8px;\n  padding: 6px 8px;\n  width: 100px;\n  margin: 0 auto;\n  color: #EC9A29;\n  background: #A8201A;\n  font-weight: bold;\n  cursor: pointer;\n`\n\nconst FormComponent = (props) => {\n  return (\n    <FormWrapper>\n      <Form>\n        <H2>Find weather</H2>\n        <Input\n          placeholder={props.placeholder}\n          type=\"text\"\n          name=\"location\"\n          id=\"location\"\n          minLength=\"2\"\n          required\n          value={props.data.location}\n          onChange={props.handleChange}\n        />\n        <Button\n          className=\"search-button\"\n          onClick={props.handleSubmit}\n        >SEARCH</Button>\n      </Form>\n    </FormWrapper>\n  )\n}\n\nexport default FormComponent;","import React, {Component} from 'react';\nimport FormComponent from './FormComponent.js';\n\nclass FormContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      location: '',\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    const { name, value } = e.target;\n    this.setState({[name]: value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.sendToParent();\n    this.setState({location: ''});\n  }\n\n  sendToParent = () => {\n    this.props.updateLocation(this.state);\n  }\n\n  render() {\n    return(\n      <FormComponent \n        data={this.state}\n        placeholder={this.props.placeholder}\n        handleSubmit={this.handleSubmit}\n        handleChange={this.handleChange}\n      />\n    )\n  }\n}\n\nexport default FormContainer;","import React from 'react';\nimport styled from 'styled-components';\n\nconst MainWrapper = styled.div`\n  width: 80%;\n  padding: 20px;\n  margin-top: 15px;\n  border-left: 5px ridge #143642;\n  \n  @media only screen and (min-width: 600px) {\n    width: 60%;\n  }  \n  \n  @media only screen and (min-width: 900px) {\n    width: 40%;\n  }\n`\n\nconst List = styled.ul`\n\n`\n\nconst ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  margin: 8px 0;\n  padding: 5px 0;\n  border-bottom: 1px solid #A8201A;\n`\n\nconst Span = styled.span`\n  color: #A8201A;\n  font-weight: bold;\n`\n\nconst Main = (props) => {\n  return (\n    <MainWrapper>\n      <List>\n        <ListItem>City: <Span>{props.data.location}</Span></ListItem>\n        <ListItem>Current temperature: <Span>{props.data.temp} °C</Span></ListItem>\n        <ListItem>Today's high: <Span>{props.data.high} °C</Span></ListItem>\n        <ListItem>Today's low: <Span>{props.data.low} °C</Span></ListItem>\n        <ListItem>Humidity: <Span>{props.data.humidity}%</Span></ListItem>\n        <ListItem>Wind: <Span>{props.data.wind} m/s</Span></ListItem>\n      </List>\n    </MainWrapper>\n  )\n}\n\nexport default Main;","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      min-height: 100vh;\n    `\n\nexport default Wrapper;","import React, {Component} from 'react';\nimport { Reset } from 'styled-reset';\nimport GlobalStyle from './components/GlobalStyle.js';\nimport ReactLoading from 'react-loading';\nimport Header from './components/Header.js';\nimport FormContainer from './components/FormContainer.js';\nimport Main from './components/Main.js';\nimport Wrapper from './components/Wrapper.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      temp: '',\n      high: '',\n      low: '',\n      humidity: '',\n      wind: '',\n      location: '',\n      loaded: false,\n      placeholder: 'City'\n    }\n    this.updateLocation = this.updateLocation.bind(this);\n    this.processData = this.processData.bind(this);\n    this.loadDefault = this.loadDefault.bind(this);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.getWeatherData('Berlin', 'metric')\n        .then(data => this.processData(data))\n        .then(() => this.setState({ loaded: true }))\n    }, 1200);\n  }\n\n  async getWeatherData(city, unit) {\n    try {\n      const key = process.env.REACT_APP_WEATHER_API_KEY;\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${key}`, { mode: 'cors' });\n      if (response.status !== 200) {\n        throw new Error('not 200 response');\n      } else return response.json();\n    } catch(err) {\n      this.setState({ placeholder: 'City not found! Try again!'})\n    }\n  }\n\n  processData(json) {\n    this.setState({\n      temp: Math.round(json.main.temp),\n      low: Math.round(json.main.temp_min),\n      high: Math.round(json.main.temp_max),\n      humidity: json.main.humidity,\n      wind: json.wind.speed,\n      location: json.name,\n    })\n  }\n   \n  loadDefault() {\n    this.getWeatherData('Berlin', 'metric')\n    .then(data => this.processData(data))\n    .then(() => this.setState({loaded: true}))\n  }\n\n  updateLocation(formData) {\n    this.setState({ loaded: false, location: formData.location }, () => {\n        setTimeout(() => {\n          this.getWeatherData(this.state.location, 'metric')\n            .then(data => this.processData(data))\n            .then(() => this.setState({ loaded: true, placeholder: 'City' }))\n            .catch(() => this.loadDefault())\n        }, 1200)\n      }\n    )\n  }\n  \n  render() {\n    return (\n      <Wrapper>\n        <Reset />\n        <GlobalStyle />\n        <Header />\n        <FormContainer \n          updateLocation={this.updateLocation}\n          placeholder={this.state.placeholder}\n        />\n        {!this.state.loaded ? \n          (<ReactLoading type={'bubbles'} color={'#143642'} />) : \n          (<Main data={this.state} />)\n        }\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}